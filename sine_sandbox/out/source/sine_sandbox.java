/* autogenerated by Processing revision 1289 on 2023-03-25 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class sine_sandbox extends PApplet {

float time = 0;
boolean pause = false;

public void setup() {
  /* size commented out by preprocessor */;
  frameRate(24);
  getSurface().setLocation(1000, 300);
  }

public void draw() {
  background(50);
  time = frameCount / 1;

  float absSine50 = absSine(50);

  stroke(255);
  fill(0);
  rect(90, 5, 115, 170);
  fill(255);

  line(95, 5, 95, absSine50 * 100);
  text(absSine50, 100, 120);
  println(absSine50);

  text(absSine50, 100, 100);
  for (float x = 100; x <= 200; x+=1) {
    float yInc = round(sineOfTime(20) * 10);
    point(x, 150 + yInc);
  }

  fill(255, 204, 0);
  stroke(255, 220, 10);
  text("function", 100, 190);
  sineWave(100, 220, 10, 0); // sineWave( x, y, amp, phase )
  sineWave(100, 220, 20, 0);
  sineWave(100, 220, 5, 0);
  sineWave(100, 220, 5, 2);


  for (float a = 0; a <= 20; a++) {
    sineWave(100, 250, a, 10);
  }

  for (float a = 0; a <= 20; a++) {
    sineWave(100, 300, a * sineOfTime(50), 10);
  }

  for (float a = 0; a <= 20; a++) {
    sineWave(100, 350, a * sineOfTime(50), 10 * sineOfTime(50));
  }
}

public float sineOfTime(float freq) {
  float timeOverFreq = TWO_PI / freq * time;
  float sine = sin(timeOverFreq);
  time+=0.5f;
  return sine;
}

public float absSine(float freq) {
  float timeOverFreq = TWO_PI / freq * time;
  float sine = abs(sin(timeOverFreq));
  time+=0.5f;
  return sine;
}

public void sineWave(float xPos, float yPos, float amp, float phase) {
  for (float x = xPos; x <= xPos + 100; x+=1) {
    float yInc = round(sineOfTime(50) * amp + phase);
    point(x, yPos + yInc);
  }
}



public void mouseClicked() {
  if (pause == false) {
    noLoop();
    pause = true;
    println(pause);
  } else if (pause == true) {
    loop();
    pause = false;
    println(pause);
  }
}


  public void settings() { size(600, 600); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "sine_sandbox" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
