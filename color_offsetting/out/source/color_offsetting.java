/* autogenerated by Processing revision 1289 on 2024-11-10 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class color_offsetting extends PApplet {


public void setup () {
 /* size commented out by preprocessor */;
}

public void draw () {

  background(250, 23, 50);
  fill(200, 100, 50);

}

class pixelscanner {

  PImage image;

  int lerpTarget;
  int targetMem;


  public void pixelLoad(String file) {

    this.image = loadImage(file);
    this.image.loadPixels();
  }

  public void colorLerp(int a, int lerp) {

    for (int i = 0; i < width*height; i++) {
      if (image.pixels[i] == a) {
        image.pixels[i] = lerp;
      }
    }
  }

  public void newColorLerp(int startColor, 
    int endColor, float lerpValue) {

    int lerpedColor;
    lerpedColor = lerpColor(startColor, endColor, lerpValue);

    for (int i = 0; i < width * height; i++) {
      if (this.image.pixels[i] == this.lerpTarget) {
        this.image.pixels[i] = lerpedColor;
      } else if ( this.image.pixels[i] != this.lerpTarget) {
        this.image.pixels[i] = color(0, 0, 0, 1); }
    }

    this.targetMem = lerpedColor;
    this.image.updatePixels();
    image(this.image, 0, 0);
    //this.image.resize(dimensionX, 0);
  }


  public int lerpOut () {

    this.lerpTarget = this.targetMem;
    int memory = this.targetMem;

    return memory;
  }
}


  public void settings() { size(800, 800); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "color_offsetting" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
